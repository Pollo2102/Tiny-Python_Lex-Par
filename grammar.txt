expr -> assign
expr -> PrintFunc 
expr -> ForCall

assign -> IDENTIFIER = assign'
assign' -> IDENTIFIER ( LITERAL )
assign' -> FACTOR

PrintFunc -> PRINT Print_Args

Print_Args -> LITERAL Optl_Print_Args
Optl_Print_Args -> COMMA TERM Optl_Print_Args'
Optl_Print_Args -> Epsilon
Optl_Print_Args' -> Print_Args
Optl_Print_Args' -> Epsilon

ForCall -> FOR IDENTIFIER IN IDENTIFIER OpenPar Factor COMMA Factor ClosePar COLON Func_Code

DefCall -> DEF IDENTIFIER OpenPar Optl_Args ClosePar COLON Func_Code

Cond_Stmt -> Cond_KeyWd Comparison COLON Func_Code

Else_Stmt -> ELSE COLON Func_Code

Func_Code -> EOL INDENT expr Func_Code' DedentProd
Func_Code' -> EOL expr Func_Code'
Func_Code' -> Epsilon

Array -> IDENTIFIER OpenBrack Factor Array' CloseBrack // Check again. Case missing
Array' -> COMMA Factor Array'
Array' -> Epsilon

Array_init -> [1,2,3,5,6,4] // Implement

Cond_KeyWd -> IF
Cond_KeyWd -> ELIF
Cond_KeyWd -> WHILE

Comparison -> IDENTIFIER RelOps IDENTIFIER

DedentProd -> DEDENT | EOF

ArithOps -> OpAdd
ArithOps -> OpSub
ArithOps -> OpMult
ArithOps -> OpDiv
ArithOps -> OpPow
ArithOps -> OpMod

RelOps -> RelEQ
RelOps -> RelNEQ
RelOps -> RelLEQ
RelOps -> RelGEQ
RelOps -> RelGT
RelOps -> RelLT

Term -> Factor Term'
Term' -> ArithOps Factor Term'
Term' -> Epsilon

Factor -> IDENTIFIER
Factor -> NUMBER